name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TAG: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - run: |
        echo "github.sha : ${{ github.sha }}"
        echo "github.event.pull_request.head.sha : ${{ github.event.pull_request.head.sha }}"
    - name: Set image tag
      env:
        IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}
      run: |
        echo "IMAGE_TAG: ${IMAGE_TAG}"
    - uses: actions/setup-node@v1
      with:
        node-version: '12'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Configure yarn cache
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ./node_modules
        key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          v1-yarn-
    - run: yarn install
    - run: yarn run build
    - uses: actions/upload-artifact@v2
      with:
        name: frontend-build
        path: build
        retention-days: 1
    - run: yarn run test

  deploy:
    if: ${{ github.ref == 'refs/heads/master' || contains(github.event.pull_request.labels.*.name, 'deploy_dev') }}
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: frontend-build
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Deploy frontend build to S3
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: aws s3 sync --no-progress --delete build/ s3://"$S3_BUCKET"/

  test:
    needs: deploy
    runs-on: ubuntu-latest
    environment: test
    steps:
      - run: echo "Running a test"
